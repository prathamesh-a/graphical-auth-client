{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleCrypto = void 0;\n/**\n * SimpleCryptoJS\n *\n * Simplified AES cryptography for safer and easier encryption and decryption processes\n * of any JavaScript objects.\n **/\nvar crypto_js_1 = require(\"crypto-js\");\n/**\n * SimpleCrypto\n *\n * @class\n */\nvar SimpleCrypto = /** @class */function () {\n  /**\n   * Represent a SimpleCrypto instance\n   *\n   * @constructor\n   * @param\t{string}\tsecret\t\tThe secret key for cryptographic process.\n   */\n  function SimpleCrypto(secret) {\n    if (secret === void 0) {\n      throw new Error(\"SimpleCrypto object MUST BE initialised with a SECRET KEY.\");\n    }\n    this._dataBuffer = \"\";\n    this._encoder = crypto_js_1.enc.Utf8;\n    this._secret = (0, crypto_js_1.SHA3)(typeof secret === \"string\" ? secret : secret.toString());\n    this._keySize = 256;\n    this._iterations = 100;\n  }\n  SimpleCrypto.sanitiseData = function (data) {\n    if (data === void 0 || data === null) {\n      throw new Error(\"There is no data provided. Process halted.\");\n    }\n    var sanitised = typeof data === \"object\" ? JSON.stringify(data) : typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\" ? data.toString() : null;\n    if (null === sanitised) {\n      throw new Error(\"Invalid data type. Only object, string, number and boolean data types are allowed.\");\n    }\n    return sanitised;\n  };\n  SimpleCrypto.transform = function (src) {\n    if (src.toLowerCase() === \"true\" || src.toLowerCase() === \"false\") {\n      return src.toLowerCase() === \"true\";\n    }\n    try {\n      return JSON.parse(src);\n    } catch (jsonError) {\n      return /^-?[\\d.]+(?:e-?\\d+)?$/.test(src) && !isNaN(parseFloat(src)) ? parseFloat(src) : src;\n    }\n  };\n  Object.defineProperty(SimpleCrypto, \"encoders\", {\n    /**\n     * Encoders\n     *\n     * Get Encoder instance available.\n     *\n     * @since\t\t2017.10.16\n     * @access\t\tpublic\n     *\n     * @memberOf    SimpleCrypto\n     *\n     * @see     WordArray\n     *\n     * @return  {Encoders}  Returns object of Encoder instances.\n     */\n    get: function () {\n      return __assign({\n        Default: crypto_js_1.enc.Utf8\n      }, crypto_js_1.enc);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Generate Random\n   *\n   * Generate a random string or WordArray.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   * @param   {boolean}   expectsWordArray\tSet to true to return WordArray instance.\n   * Default is false and return a string.\n   *\n   * @return  {string | WordArray}  Returns a random string or WordArray.\n   */\n  SimpleCrypto.generateRandom = function (length, expectsWordArray) {\n    if (length === void 0) {\n      length = 128;\n    }\n    if (expectsWordArray === void 0) {\n      expectsWordArray = false;\n    }\n    var random = crypto_js_1.lib.WordArray.random(length / 8);\n    return expectsWordArray ? random : random.toString();\n  };\n  /**\n   * Generate Random String\n   *\n   * Generate a random string\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   *\n   * @return  {string | WordArray}  Returns a random string.\n   */\n  SimpleCrypto.generateRandomString = function (length) {\n    if (length === void 0) {\n      length = 128;\n    }\n    return SimpleCrypto.generateRandom(length, false);\n  };\n  /**\n   * Generate Random Word Array\n   *\n   * Generate a random WordArray.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see     WordArray\n   *\n   * @param   {number}    length      \t\tThe length of random to be generated.\n   *\n   * @return  {string | WordArray}  Returns a random WordArray.\n   */\n  SimpleCrypto.generateRandomWordArray = function (length) {\n    if (length === void 0) {\n      length = 128;\n    }\n    return SimpleCrypto.generateRandom(length, true);\n  };\n  SimpleCrypto.prototype._decrypt = function () {\n    if (this._dataBuffer.length <= 64) {\n      throw new Error(\"Invalid cipher text. Decryption halted.\");\n    }\n    var salt = crypto_js_1.enc.Hex.parse(this._dataBuffer.substring(0, 32));\n    var initialVector = crypto_js_1.enc.Hex.parse(this._dataBuffer.substring(32, 64));\n    var encrypted = this._dataBuffer.substring(64, this._dataBuffer.length - 64);\n    var key = (0, crypto_js_1.PBKDF2)(this._secret.toString(), salt, {\n      keySize: this._keySize / 32,\n      iterations: this._iterations\n    });\n    var hashedCipherText = this._dataBuffer.substring(this._dataBuffer.length - 64);\n    var cipherText = this._dataBuffer.substring(0, this._dataBuffer.length - 64);\n    if (hashedCipherText != (0, crypto_js_1.HmacSHA256)(cipherText, key).toString()) {\n      throw new Error(\"Invalid encrypted text received. Decryption halted.\");\n    }\n    var decrypted = crypto_js_1.AES.decrypt(encrypted, key, {\n      iv: initialVector,\n      padding: crypto_js_1.pad.Pkcs7,\n      mode: crypto_js_1.mode.CBC\n    });\n    return SimpleCrypto.transform(decrypted.toString(SimpleCrypto.encoders.Default));\n  };\n  SimpleCrypto.prototype._encrypt = function () {\n    var salt = SimpleCrypto.generateRandom(128, true);\n    var initialVector = SimpleCrypto.generateRandom(128, true);\n    var key = (0, crypto_js_1.PBKDF2)(this._secret.toString(), salt, {\n      keySize: this._keySize / 32,\n      iterations: this._iterations\n    });\n    var encrypted = crypto_js_1.AES.encrypt(this._dataBuffer, key, {\n      iv: initialVector,\n      padding: crypto_js_1.pad.Pkcs7,\n      mode: crypto_js_1.mode.CBC\n    });\n    // Combining the encrypted string with salt and IV to form cipher-text\n    var cipherText = salt.toString() + initialVector.toString() + encrypted.toString();\n    // Generate authentication tag and append that to the cipher-text using the key derived from PBKDF2.\n    // (Optional TODO: Include a module to generate authentication key. Possibly HKDF-SHA256.)\n    var hashedCipherText = (0, crypto_js_1.HmacSHA256)(cipherText, key).toString();\n    return cipherText + hashedCipherText;\n  };\n  SimpleCrypto.prototype.decrypt = function (cipher, secondArg, thirdArg) {\n    var _this = this;\n    var setDecryptionOption = function (arg) {\n      if (typeof arg !== \"boolean\") _this.setEncoder(arg);\n    };\n    try {\n      if (cipher !== void 0) {\n        this.update(cipher);\n      }\n      if (secondArg !== void 0) {\n        setDecryptionOption(secondArg);\n      }\n      if (thirdArg !== void 0) {\n        setDecryptionOption(thirdArg);\n      }\n      return this._decrypt();\n    } catch (error) {\n      throw error;\n    }\n  };\n  SimpleCrypto.prototype.encrypt = function (data) {\n    try {\n      if (data !== void 0) {\n        this.update(data);\n      }\n      return this._encrypt();\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Decrypt Object\n   *\n   * Decrypt a encrypted string and try to convert it back to object.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   * @deprecated\tSince version 2.0.0, use decrypt(cipher: CipherText) instead.\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see\t\tdecrypt\n   *\n   * @param   {string}\tcipher\t\tThe encrypted string of the data.\n   *\n   * @return  {string}\tThe decrypted data of the encrypted string in the form\n   * of object.\n   */\n  SimpleCrypto.prototype.decryptObject = function (cipher) {\n    return this.update(cipher).decrypt();\n  };\n  /**\n   * Encrypt Object\n   *\n   * Encrypt an object.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   * @deprecated\tSince version 2.0.0, use encrypt(data: PlainData) instead.\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @see\t\tencrypt\n   *\n   * @param   {object}\tobject\t\tThe object to be encrypted.\n   *\n   * @return  {string}\tThe encrypted string of the object.\n   */\n  SimpleCrypto.prototype.encryptObject = function (object) {\n    return this.update(object).encrypt();\n  };\n  /**\n   * Append\n   *\n   * Append the data to be encrypted or decrypted.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n  SimpleCrypto.prototype.append = function (data) {\n    try {\n      this._dataBuffer = this._dataBuffer + SimpleCrypto.sanitiseData(data);\n      return this;\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Update\n   *\n   * Change data to be encrypted or decrypted.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {object | string | number | boolean}\tdata\tData to be encrypted or decrypted.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n  SimpleCrypto.prototype.update = function (data) {\n    try {\n      this._dataBuffer = SimpleCrypto.sanitiseData(data);\n      return this;\n    } catch (error) {\n      throw error;\n    }\n  };\n  /**\n   * Set Encoder\n   *\n   * Change the default encoding type for the decryption process.\n   *\n   * @since\t\t2020.05.09\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {Encoder}\tencoder\t\tThe new Encoder object.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n  SimpleCrypto.prototype.setEncoder = function (encoder) {\n    /*\n     * TODO: Encoding support is dropped at the moment, both for encryption\n     *  and decryption. We should figure out how we have to implement encoding\n     *  support in the simplest way possible.\n     * */\n    this._encoder = encoder;\n    return this;\n  };\n  /**\n   * Set Secret\n   *\n   * Change the secret key by setting a new one. By changing the secret key,\n   * any encrypted string that encrypted by previous secret key will not be\n   * able to decrypted, unless the secret key is set to the one used to\n   * encrypt the data.\n   *\n   * @since\t\t2017.10.16\n   * @access\t\tpublic\n   *\n   * @memberOf    SimpleCrypto\n   *\n   * @param   {string}\tsecret\t\tThe new secret key as string.\n   *\n   * @return  {SimpleCrypto}\t\tCurrent SimpleCrypto instance.\n   */\n  SimpleCrypto.prototype.setSecret = function (secret) {\n    this._secret = (0, crypto_js_1.SHA3)(typeof secret === \"string\" ? secret : secret.toString());\n    return this;\n  };\n  return SimpleCrypto;\n}();\nexports.SimpleCrypto = SimpleCrypto;\nexports.default = SimpleCrypto;","map":{"version":3,"mappings":"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","names":["secret","Error","_dataBuffer","_encoder","crypto_js_1","Utf8","_secret","toString","_keySize","_iterations","SimpleCrypto","data","sanitised","JSON","stringify","src","toLowerCase","parse","jsonError","test","isNaN","parseFloat","Object","Default","length","expectsWordArray","random","WordArray","generateRandom","salt","Hex","substring","initialVector","encrypted","key","keySize","iterations","hashedCipherText","cipherText","decrypted","decrypt","iv","padding","Pkcs7","mode","CBC","transform","encoders","encrypt","cipher","secondArg","thirdArg","setDecryptionOption","arg","_this","setEncoder","update","_decrypt","error","_encrypt","object","sanitiseData","encoder","exports"],"sources":["../src/SimpleCrypto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}